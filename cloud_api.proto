syntax = "proto3";

package CloudApi;

option go_package = "go_cloud/cloud_api";

import "google/protobuf/timestamp.proto";

import "block-proto/block_user.proto";
import "block-proto/block_network.proto";

service AccessService {
    rpc GenerateAuthToken(ApiRequest) returns (ApiResponse) {}
}

service UserService {
    rpc Create(ApiRequest) returns (ApiResponse) {}
    rpc UpdatePassword(ApiRequest) returns (ApiResponse) {}
    rpc UpdateMetadata(ApiRequest) returns (ApiResponse) {}
    rpc UpdateImage(ApiRequest) returns (ApiResponse) {}
    rpc UpdateEmail(ApiRequest) returns (ApiResponse) {}
    rpc UpdateSecurity(ApiRequest) returns (ApiResponse) {}
    rpc Get(ApiRequest) returns (ApiResponse) {}
    rpc GetAll(ApiRequest) returns (ApiResponse) {}
    rpc ValidateCredentials(ApiRequest) returns (ApiResponse) {}
    rpc Delete(ApiRequest) returns (ApiResponse) {}
    rpc DeleteNamespace(ApiRequest) returns (ApiResponse) {}
}

service NetworkService {
    rpc Heartbeat(Request) returns (Response) {}
    rpc Invite(ApiRequest) returns (ApiResponse) {}
    rpc Accept(ApiRequest) returns (ApiResponse) {}
    rpc GetConnections(ApiRequest) returns (ApiResponse) {}
    rpc Remove(ApiRequest) returns (ApiResponse) {}
}

message ApiRequest {
    string private_key = 1;
    string auth_token = 2;
    BlockUser.UserRequest user_request = 3;
    BlockNetwork.NetworkRequest network_request = 4;
}

message ApiResponse {
    string auth_token = 1;
    BlockUser.UserResponse user_response = 2;
    BlockNetwork.NetworkResponse network_response = 3;
}

message Request {}

message Response {
    string msg = 1;
}